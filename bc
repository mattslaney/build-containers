#!/bin/bash
# This is the main build-container script used to build project subdirectories

usage() {
echo -e "\e[1mbuild-containers\e[0m\n"
cat << EOF
usage: ./bc project [--options] [-- --project-args]

project: Name of project subdirectory in build-containers repo

--options:
    --build [-b]:   Build the project
    --clean [-c]:   Clean the project directory (Remove all untracked/ignored files/directories)
    --exe:          List executables in project/dist
    --ls:           List build artifacts
    --:             Arguments passed after the -- arg will be handled by the project build script
EOF
}

clean() {
    local P=$1
    git clean -fdx $P
}

list() {
    local P=$1
    git ls-files --others $P
}

# Process first arg
PROJECT=${1%/}
if [ -z $PROJECT ]; then
    echo -e "\e[33mExpected name of project to build\e[0m\n"
    usage
    exit 1
fi

# We expect it to be a project directory
if [ ! -d $PROJECT ]; then
    echo -e "\e[33mExpected first arg to be subdirectory (project)\e[0m"
    exit 1
fi

shift
if [ $# -eq 0 ]; then
    echo -e "\e[33mArg count was zero but project was specified\e[0m"
    echo "Doing nothing, did you mean to use --build"
    echo "Specify --help to see usage"
fi

# Process remaining args
while test $# -gt 0
do
    case "$1" in
        --)         shift; break;;
        -b|--build) build=true;;
        -c|--clean) clean $PROJECT;;
        --exe)      find $PROJECT/dist -type f -executable -print;;
        --help)     usage;;
        --ls)       list $PROJECT;;
        *)          echo -e "\e[33mUnexpected arg: $1\e[0m";;
    esac
    shift
done

if [ "$build" != "true" ]; then
    exit 0
fi

if [[ $PROJECT == "." ]]; then
    echo "Building main build-container"
    podman build -t build-container .
    exit 0
fi

build_container="build-container"

project_dir=$(pwd)/$PROJECT
echo "Building project: $PROJECT"
chmod +x $project_dir/build.sh

# If the project has it's own Containerfile, use that
if [ -f $project_dir/Containerfile ]; then
    echo "Project contains own Containerfile, using that"
    build_container="$PROJECT-build-container"
    podman build -f "$project_dir/Containerfile" -t $build_container
fi

# Before running check if there are existing build artifacts - unclean tree
# Unless it's a new (untracked) project dir
if git ls-files --error-unmatch $PROJECT &>/dev/null; then
    if [ $(git ls-files --others -- $PROJECT | wc -l) -ne 0 ]; then
        echo -e "\e[33mProject directory is unclean, do you want to clean it?"
        git ls-files --others -- $PROJECT | awk '{print "    * " $0}'
        read -p "Do you want to delete them?" delete_artifacts
        echo -e -n "\e[0m"
        if [[ $delete_artifacts =~ ^(yes|y)$ ]]; then
            clean $PROJECT
        fi
    fi
fi

echo "Starting build in $build_container"
echo -e "\e[34m"
if [ "$DEBUG" = "true" ]; then
    podman run --rm -it -v $project_dir:/app -e ARGS="$@" $build_container /bin/bash
else
    podman run --rm -v $project_dir:/app $build_container /app/build.sh "$@"
fi
echo -e "\e[0m"

echo "Build finished"

